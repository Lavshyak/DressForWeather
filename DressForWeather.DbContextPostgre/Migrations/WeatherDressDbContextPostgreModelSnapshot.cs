// <auto-generated />
using System;
using DressForWeather.DbContextPostgre;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DressForWeather.DbContextPostgre.Migrations
{
    [DbContext(typeof(WeatherDressDbContextPostgre))]
    partial class WeatherDressDbContextPostgreModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DressForWeather.Models.EFCoreModels.Clotch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("ClothesSetId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClothesSetId");

                    b.ToTable("Clotches");
                });

            modelBuilder.Entity("DressForWeather.Models.EFCoreModels.ClotchParameterPair", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long?>("ClotchId")
                        .HasColumnType("bigint");

                    b.Property<string>("First")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Second")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClotchId");

                    b.ToTable("ClotchesParameterPairs");
                });

            modelBuilder.Entity("DressForWeather.Models.EFCoreModels.ClothType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ClothTypes");
                });

            modelBuilder.Entity("DressForWeather.Models.EFCoreModels.ClothesSet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("ClothesSets");
                });

            modelBuilder.Entity("DressForWeather.Models.EFCoreModels.DressReport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ClothesSetId")
                        .HasColumnType("bigint");

                    b.Property<float>("Feeling")
                        .HasColumnType("real");

                    b.Property<long>("UserReporterId")
                        .HasColumnType("bigint");

                    b.Property<long>("WeatherStateId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ClothesSetId");

                    b.HasIndex("UserReporterId");

                    b.HasIndex("WeatherStateId");

                    b.ToTable("DressReports");
                });

            modelBuilder.Entity("DressForWeather.Models.EFCoreModels.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DressForWeather.Models.EFCoreModels.WeatherState", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<float>("HowSunny")
                        .HasColumnType("real");

                    b.Property<float>("Humidity")
                        .HasColumnType("real");

                    b.Property<float>("TemperatureCelsius")
                        .HasColumnType("real");

                    b.Property<int>("WindDirection")
                        .HasColumnType("integer");

                    b.Property<float>("WindSpeedMps")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("WeatherStates");
                });

            modelBuilder.Entity("DressForWeather.Models.EFCoreModels.Clotch", b =>
                {
                    b.HasOne("DressForWeather.Models.EFCoreModels.ClothesSet", null)
                        .WithMany("Clotches")
                        .HasForeignKey("ClothesSetId");
                });

            modelBuilder.Entity("DressForWeather.Models.EFCoreModels.ClotchParameterPair", b =>
                {
                    b.HasOne("DressForWeather.Models.EFCoreModels.Clotch", null)
                        .WithMany("ClotchParameters")
                        .HasForeignKey("ClotchId");
                });

            modelBuilder.Entity("DressForWeather.Models.EFCoreModels.ClothesSet", b =>
                {
                    b.HasOne("DressForWeather.Models.EFCoreModels.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("DressForWeather.Models.EFCoreModels.DressReport", b =>
                {
                    b.HasOne("DressForWeather.Models.EFCoreModels.ClothesSet", "ClothesSet")
                        .WithMany()
                        .HasForeignKey("ClothesSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DressForWeather.Models.EFCoreModels.User", "UserReporter")
                        .WithMany()
                        .HasForeignKey("UserReporterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DressForWeather.Models.EFCoreModels.WeatherState", "WeatherState")
                        .WithMany()
                        .HasForeignKey("WeatherStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClothesSet");

                    b.Navigation("UserReporter");

                    b.Navigation("WeatherState");
                });

            modelBuilder.Entity("DressForWeather.Models.EFCoreModels.Clotch", b =>
                {
                    b.Navigation("ClotchParameters");
                });

            modelBuilder.Entity("DressForWeather.Models.EFCoreModels.ClothesSet", b =>
                {
                    b.Navigation("Clotches");
                });
#pragma warning restore 612, 618
        }
    }
}
